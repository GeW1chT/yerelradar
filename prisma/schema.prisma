// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  avatar            String?
  city              String
  district          String?
  phone             String?
  bio               String?
  level             UserLevel @default(BEGINNER)
  totalReviews      Int      @default(0)
  helpfulVotes      Int      @default(0)
  streakDays        Int      @default(0)
  lastReviewDate    DateTime?
  isLocalHero       Boolean  @default(false)
  isMysteryDiner    Boolean  @default(false)
  experiencePoints  Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  reviews           Review[]
  businesses        Business[]
  followings        UserFollow[] @relation("Follower")
  followers         UserFollow[] @relation("Following")
  lists             UserList[]
  checkIns          CheckIn[]
  notifications     Notification[]
  achievements      UserAchievement[]
  helpfulVotesGiven ReviewHelpful[]
  reportsMade       Report[] @relation("Reporter")
  reportsReceived   Report[] @relation("Reported")

  @@map("users")
}

model Business {
  id                String      @id @default(cuid())
  name              String
  slug              String      @unique
  description       String?
  category          String
  subcategory       String?
  city              String
  district          String
  neighborhood      String?
  address           String
  lat               Float
  lng               Float
  phone             String?
  website           String?
  email             String?
  verified          Boolean     @default(false)
  isPremium         Boolean     @default(false)
  avgRating         Float       @default(0)
  totalReviews      Int         @default(0)
  totalCheckIns     Int         @default(0)
  healthScore       Float       @default(0)
  hygieneScore      Float       @default(0)
  serviceScore      Float       @default(0)
  valueScore        Float       @default(0)
  trendScore        Float       @default(0)
  aiSummary         String?
  priceRange        PriceRange?
  accessibility     Json?       // Accessibility features
  covidSafety       Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  ownerId           String?

  // Relations
  owner             User?       @relation(fields: [ownerId], references: [id])
  reviews           Review[]
  images            BusinessImage[]
  workingHours      WorkingHours[]
  checkIns          CheckIn[]
  amenities         BusinessAmenity[]
  listItems         ListItem[]
  reports           Report[]
  analytics         BusinessAnalytics[]
  competitors       BusinessCompetitor[] @relation("Business")
  competitorOf      BusinessCompetitor[] @relation("Competitor")

  @@map("businesses")
}

model Review {
  id                String    @id @default(cuid())
  businessId        String
  userId            String
  rating            Int       // 1-5
  title             String
  content           String
  aiSentiment       Sentiment @default(NEUTRAL)
  aiScore           Float     @default(0)
  tasteScore        Float?    @default(0)
  serviceScore      Float?    @default(0)
  cleanlinessScore  Float?    @default(0)
  priceScore        Float?    @default(0)
  atmosphereScore   Float?    @default(0)
  aiTags            Json      @default("[]")
  aiSummary         String?
  helpfulCount      Int       @default(0)
  isVerifiedVisit   Boolean   @default(false)
  visitDate         DateTime?
  audioUrl          String?   // Voice review
  audioSentiment    Json?     // Audio analysis
  isMysteryReview   Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  business          Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  images            ReviewImage[]
  helpfulVotes      ReviewHelpful[]
  reports           Report[]

  @@map("reviews")
}

model UserFollow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower    User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_follows")
}

model UserList {
  id          String     @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean    @default(false)
  category    ListCategory @default(GENERAL)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       ListItem[]

  @@map("user_lists")
}

model ListItem {
  id         String   @id @default(cuid())
  listId     String
  businessId String
  note       String?
  order      Int      @default(0)
  createdAt  DateTime @default(now())

  // Relations
  list       UserList @relation(fields: [listId], references: [id], onDelete: Cascade)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([listId, businessId])
  @@map("list_items")
}

model CheckIn {
  id         String   @id @default(cuid())
  userId     String
  businessId String
  note       String?
  photo      String?
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("check_ins")
}

model BusinessImage {
  id         String   @id @default(cuid())
  businessId String
  url        String
  caption    String?
  order      Int      @default(0)
  aiTags     Json     @default("[]")
  aiAnalysis Json?    // AI photo analysis
  createdAt  DateTime @default(now())

  // Relations
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_images")
}

model ReviewImage {
  id         String   @id @default(cuid())
  reviewId   String
  url        String
  caption    String?
  aiTags     Json     @default("[]")
  aiAnalysis Json?    // AI photo analysis
  createdAt  DateTime @default(now())

  // Relations
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_images")
}

model WorkingHours {
  id         String    @id @default(cuid())
  businessId String
  day        DayOfWeek
  openTime   String?   // "09:00"
  closeTime  String?   // "22:00"
  isClosed   Boolean   @default(false)

  // Relations
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, day])
  @@map("working_hours")
}

model ReviewHelpful {
  id       String @id @default(cuid())
  reviewId String
  userId   String

  // Relations
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@map("review_helpful")
}

model BusinessAmenity {
  id         String   @id @default(cuid())
  businessId String
  amenity    Amenity
  createdAt  DateTime @default(now())

  // Relations
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, amenity])
  @@map("business_amenities")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional notification data
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  points      Int    @default(0)
  category    AchievementCategory

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Report {
  id         String     @id @default(cuid())
  reporterId String
  reportedId String?
  businessId String?
  reviewId   String?
  type       ReportType
  reason     String
  status     ReportStatus @default(PENDING)
  createdAt  DateTime   @default(now())
  resolvedAt DateTime?

  // Relations
  reporter   User       @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reported   User?      @relation("Reported", fields: [reportedId], references: [id], onDelete: Cascade)
  business   Business?  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  review     Review?    @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model BusinessAnalytics {
  id               String   @id @default(cuid())
  businessId       String
  date             DateTime
  profileViews     Int      @default(0)
  phoneClicks      Int      @default(0)
  websiteClicks    Int      @default(0)
  directionClicks  Int      @default(0)
  searchAppearances Int     @default(0)
  averageRating    Float    @default(0)
  totalReviews     Int      @default(0)
  newReviews       Int      @default(0)
  checkIns         Int      @default(0)

  // Relations
  business         Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@map("business_analytics")
}

model BusinessCompetitor {
  id           String   @id @default(cuid())
  businessId   String
  competitorId String
  similarity   Float    @default(0) // AI calculated similarity
  createdAt    DateTime @default(now())

  // Relations
  business     Business @relation("Business", fields: [businessId], references: [id], onDelete: Cascade)
  competitor   Business @relation("Competitor", fields: [competitorId], references: [id], onDelete: Cascade)

  @@unique([businessId, competitorId])
  @@map("business_competitors")
}

model CityInsight {
  id              String   @id @default(cuid())
  city            String
  date            DateTime
  risingCategories Json     @default("[]")
  peakHours       Json     // {"monday": {"breakfast": "08:00-10:00"}}
  averagePrices   Json     // {"coffee": 25, "dinner": 180}
  seasonalTrends  String?
  totalBusinesses Int      @default(0)
  activeUsers     Int      @default(0)
  totalReviews    Int      @default(0)

  @@unique([city, date])
  @@map("city_insights")
}

// Enums
enum UserLevel {
  BEGINNER
  CONTRIBUTOR
  REVIEWER
  EXPERT
  GURU
  LOCAL_HERO
}

enum Sentiment {
  VERY_NEGATIVE
  NEGATIVE
  NEUTRAL
  POSITIVE
  VERY_POSITIVE
}

enum PriceRange {
  BUDGET        // ₺
  MODERATE      // ₺₺
  EXPENSIVE     // ₺₺₺
  LUXURY        // ₺₺₺₺
}

enum ListCategory {
  GENERAL
  ROMANTIC
  FAMILY
  BUSINESS
  CASUAL
  SPECIAL_OCCASION
  BUDGET_FRIENDLY
  LUXURY
  QUICK_BITE
  DATE_NIGHT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Amenity {
  WIFI
  PARKING
  WHEELCHAIR_ACCESSIBLE
  OUTDOOR_SEATING
  LIVE_MUSIC
  ACCEPTS_CARDS
  DELIVERY
  TAKEOUT
  RESERVATIONS
  KIDS_FRIENDLY
  PET_FRIENDLY
  VEGAN_OPTIONS
  HALAL
  ALCOHOL
  SMOKING_AREA
  AIR_CONDITIONING
  VALET_PARKING
}

enum NotificationType {
  NEW_REVIEW
  NEW_FOLLOWER
  REVIEW_HELPFUL
  ACHIEVEMENT_EARNED
  BUSINESS_RESPONSE
  RECOMMENDATION
  TREND_ALERT
  MYSTERY_MISSION
  HEALTH_ALERT
}

enum AchievementCategory {
  REVIEWER
  EXPLORER
  SOCIAL
  EXPERT
  PIONEER
}

enum ReportType {
  SPAM
  INAPPROPRIATE
  FAKE_REVIEW
  WRONG_INFORMATION
  HARASSMENT
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  REJECTED
}
